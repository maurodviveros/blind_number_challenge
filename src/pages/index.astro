---
import GameBoard from "../components/game-board.astro";
import Menu from "../components/menu.astro";

import Layout from '../layouts/Layout.astro';

const title = "Blind Number Challenge";
const randomNumber = 999;

const levels = [
	{ _id: 2, className: "level very-easy" },
	{ _id: 5, className: "level easy" },
	{ _id: 10, className: "level normal" },
]
const lastLevel = levels.at(-1) || { _id: 0 };
const lastLevelCells = lastLevel._id;
const cells = Array.from({length: lastLevelCells}, (_, i) => i + 1);

const defaultLevel = levels[1]._id;

---

<Layout title={title}>
	<h1>{title}</h1>
	<main>
		<GameBoard cells={cells} number={randomNumber}/>
		<Menu levels={levels}/>
	</main>

	<footer>
		<p>COPYRIGHT &copy; 2023 &mdash; <a href="https://github.com/maurodviveros" target="_blank">MAURO D. VIVEROS</a></p>
	</footer>
</Layout>

<style>
	main{
		display: flex;
		flex-direction: row-reverse;
		position: relative;
		gap: .5rem;
	}
	footer{
		position: absolute;
		bottom: 0;
	}
</style>
<script src="https://cdn.jsdelivr.net/npm/party-js@latest/bundle/party.min.js"></script>
<script async src="https://www.googletagmanager.com/gtag/js?id=G-F5PEVNKZ8E"></script>
<script define:vars={{ defaultLevel }}>
	const levelsBtnRef = document.querySelectorAll("button.level");
	const reloadBtnRef = document.querySelector("button#level-reload");
	const gameBoardElem = document.querySelector(".game-board");
	const messageElem = document.querySelector("section h2");
	const draggableElem = document.querySelector(".cell[draggable]");
	const cellsElem = document.querySelectorAll(".game-board .cell");
	const tileElem  = document.querySelector(".cell#tile");

	let hasClickDraggable = false;
	let isMobile = false;

	window.dataLayer = window.dataLayer || [];
	function gtag(){dataLayer.push(arguments);}
	gtag('js', new Date());
	gtag('config', 'G-F5PEVNKZ8E');

	

	cellsElem.forEach(cellElem => {
		cellElem.addEventListener("dragover", e => {
			if(cellElem.classList.contains("objetive")) return e.preventDefault();
			else if(cellElem.classList.contains("enable")) cellElem.classList.add("objetive");
		});
		cellElem.addEventListener("dragleave", e => {
			if(cellElem.classList.contains("objetive")) cellElem.classList.remove("objetive");
			else return e.preventDefault();
		});
	});

	draggableElem.addEventListener("dragend", () => {
		cellsElem.forEach(async (cellElem) => {
			if(!cellElem.classList.contains("objetive")) return;
			cellElem.classList.remove("objetive");
			if(draggableElem.classList.contains("disabled")) return;

			const randomNumber = parseInt(tileElem.innerHTML);
			cellElem.classList.remove("enable");
			cellElem.classList.add("busy");
			cellElem.innerHTML = randomNumber;

			await generateRandomNumber();
			nextStage();
		});
	});
	
	draggableElem.addEventListener("click", () => {
		const _cellEnable = document.querySelectorAll(".cell.enable");
		if(!_cellEnable.length) return;
		draggableElem.classList.add("pulse", "objetive");
		hasClickDraggable = true;
	});

	cellsElem.forEach(cellElem => {
		cellElem.addEventListener("click", async () => {
			if(hasClickDraggable && !tileElem.classList.contains("disabled")){
				if(!cellElem.classList.contains("enable")) return;

				const randomNumber = parseInt(tileElem.innerHTML);
				cellElem.classList.remove("enable");
				cellElem.classList.add("busy");
				cellElem.innerHTML = randomNumber;

				await generateRandomNumber();
				nextStage();
				
				draggableElem.classList.remove("pulse", "objetive");
				hasClickDraggable = false;
				// if(!isMobile){
				// }
			}
		})
	})

	reloadBtnRef.addEventListener("click", () => { reload(); });
	levelsBtnRef.forEach(levelBtnRef => {
		levelBtnRef.addEventListener("click", () => { updateLevel(levelBtnRef.id); });
	});

	const storageLevel = (level)=>{
		window.localStorage.setItem("level", level.toString());
		return level.toString();
	}

	const generateRandomNumber = async ()=>{
		return new Promise(resolve => {
			let count = 0;
			const randomNumber = Math.floor(Math.random() * 1000);
			// const randomNumber = parseInt(prompt("number"));
			
			tileElem.classList.add("disabled");
			cellsElem.forEach(cellElem => {
				if(cellElem.classList.contains("enable")) cellElem.classList.remove("enable");
			});

			const interval = setInterval(() => {
				tileElem.innerHTML = Math.floor(Math.random() * 1000);
				count++;
				if(count === 15){
					tileElem.innerHTML = randomNumber;
					tileElem.classList.remove("disabled");
					clearInterval(interval);
					resolve(randomNumber);
				}
			}, 50);
		});
	}

	const _getLevel = ()=>{
		let level = window.localStorage.getItem("level");
		if(!level) level = storageLevel(defaultLevel);

		if(level <= 5){
			gameBoardElem.style.setProperty("--rows", level);
			gameBoardElem.style.setProperty("--columns", 1);
		}
		else{
			gameBoardElem.style.setProperty("--rows", 5);
			gameBoardElem.style.setProperty("--columns", level / 5);
		}

		const levelsRef = document.querySelectorAll(".level");
		let activeLevelRef = document.querySelector(`.level#level-${level}`);
		if(!activeLevelRef){
			level = storageLevel(defaultLevel);
			activeLevelRef = document.querySelector(`.level#level-${level}`);
		}

		levelsRef.forEach(level => level.classList.remove("active"));
		activeLevelRef.classList.add("active");

		return parseInt(level);
	}

	const winGAME = ()=>{
		gtag("send", "game_win", { event_name: "win", value: true });
		gtag('set', 'game', 'win');
		gameBoardElem.classList.add("win");
		messageElem.innerHTML = "You Win!";
		draggableElem.removeAttribute("draggable");
		reloadBtnRef.classList.add("pulse");
		draggableElem.classList.remove("pulse", "objetive");

		let count = 0;
		const interval = setInterval(() => {
			count++;
			party.confetti(document.querySelector("section"));
			party.sparkles(document.querySelector("section"));
			if(count === 5){ clearInterval(interval); }
		}, 200);

	}

	const loseGAME = ()=>{
		gtag("send", "game_lose", { event_name: "lose", value: false });
		gtag('set', 'game', 'lose');
		gameBoardElem.classList.add("lose");
		messageElem.innerHTML = "Lose! Try again";
		draggableElem.removeAttribute("draggable");
		reloadBtnRef.classList.add("pulse");
		draggableElem.classList.remove("pulse", "objetive");

	}

	const reloadCells = ()=>{
		const level = _getLevel();

		const tileNumber = parseInt(tileElem.innerHTML);
		const cellsBusy = [];
		const cells = [];
		cellsElem.forEach((cellElem, i) => {
			cellElem.classList.remove("enable");
			if(i >= level) return cellElem.classList.add("hidden");
			if(cellElem.classList.contains("busy")) cellsBusy.push({ id: parseInt(cellElem.id), value: parseInt(cellElem.innerHTML), elem: cellElem });
			else cells.push({ id: parseInt(cellElem.id), value: undefined, elem: cellElem });
		});

		const _getNearbyCellsBusy = () => {
			let min, max;
			for(const cellBusy of cellsBusy){
				if(cellBusy.value > tileNumber && (!max || cellBusy.value < max.value)) max = cellBusy;
				if(cellBusy.value < tileNumber && (!min || cellBusy.value > min.value)) min = cellBusy;
			}
			return [min, max];
		}

		const _canEnable = (cell) => {
			const [ firstBusyCell, lastBusyCell ] = _getNearbyCellsBusy();
			if(!cellsBusy.length) return true;
			if(!!firstBusyCell && !lastBusyCell) return cell.id > firstBusyCell.id;
			if(!!lastBusyCell && !firstBusyCell) return cell.id < lastBusyCell.id;
			if(!!firstBusyCell && !!lastBusyCell) return firstBusyCell.id < cell.id && cell.id < lastBusyCell.id;
		}

		cells.forEach(cell => {
			if(_canEnable(cell)) cell.elem.classList.add("enable");
		});

		if(!cells.length) return winGAME();
		if(cells.length && !document.querySelectorAll(".cell.enable").length) return loseGAME();
	};

	const nextStage = ()=>{
		reloadCells();
	}

	const updateLevel = (levelID)=>{
		const levelNum = parseInt(levelID.split("-")[1]);
		storageLevel(levelNum);
		reload();
	};

	const reload = ()=>{
		gameBoardElem.classList.remove("lose", "win");
		reloadBtnRef.classList.remove("pulse");
		messageElem.innerHTML = "";
		draggableElem.setAttribute("draggable", true);

		if(isMobile){
			draggableElem.classList.add("pulse", "objetive");
			hasClickDraggable = true;
		}

		cellsElem.forEach((cellElem, i) => {
			cellElem.classList.remove("hidden", "busy", "enable");
			cellElem.innerHTML = i + 1;
		});
		start();
	}

	const start = async ()=>{
		reloadCells();
		await generateRandomNumber();
		reloadCells();
		isMobile = true;
		draggableElem.classList.add("pulse", "objetive");
		hasClickDraggable = true;
	};

	if (navigator.userAgent.match(/Android/i)
	 || navigator.userAgent.match(/webOS/i)
	 || navigator.userAgent.match(/iPhone/i)
	 || navigator.userAgent.match(/iPad/i)
	 || navigator.userAgent.match(/iPod/i)
	 || navigator.userAgent.match(/BlackBerry/i)
	 || navigator.userAgent.match(/Windows Phone/i)){

	}

	start();
</script>